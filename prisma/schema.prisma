// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  phone          String?
  accounts       Account[]
  sessions       Session[]
  // Optional for WebAuthn support
  Authenticator  Authenticator[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  converstionsIds String[] @db.ObjectId
  converstions    Conversation[] @relation(fields:[ converstionsIds],references: [id])

  seenMessageIds String[] @db.ObjectId
  seenMessages   Message[] @relation("Seen",fields:[ seenMessageIds],references: [id])

  messages Message[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime @default(now())
  lastMessageAt     DateTime @default(now())
  name String?
  isGroup Boolean?

  messagesIds String[] @db.ObjectId
  messages    Message[] 
  userIds String[] @db.ObjectId
  users    User[] @relation(fields:[ userIds],references: [id])
}

model Message{
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  body              String?
  image             String?
  createdAt         DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[] @relation("Seen",fields:[ seenIds],references: [id])

  converstionId String @db.ObjectId
  converstion   Conversation @relation(fields:[ converstionId],references: [id],onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User @relation(fields:[ senderId],references: [id],onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
